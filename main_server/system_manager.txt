# =====================================================================================
# FILE: main_server/system_manager.py
#
# PURPOSE: (초기 연동 테스트용)
#   - 로봇으로부터 이미지를 수신하여 AI 서버로 전달하고, AI 서버의 분석 결과를
#     다시 이미지와 결합하여 GUI로 전송하는 전체 데이터 흐름을 총괄.
#   - ImageManager, DetectAnalyzer, Merger 등 각 컴포넌트를 스레드로 관리.
#   - 컴포넌트 간 데이터 전달을 위해 스레드에 안전한 큐(Queue)를 사용.
# =====================================================================================


# -------------------------------------------------------------------------------------
# [섹션 1] 모듈 임포트
# -------------------------------------------------------------------------------------

# - queue: ImageManager, DetectAnalyzer, Merger 간의 데이터 통신용
# - threading, time 등 표준 라이브러리
# - from .image_manager import ImageManager
# - from .detect_analyzer import DetectAnalyzer
# - from .merger import Merger
# - # (초기 테스트에서는 robot_commander, db_manager는 제외될 수 있음)


# -------------------------------------------------------------------------------------
# [섹션 2] 전역 설정 (네트워크 주소 및 포트)
# -------------------------------------------------------------------------------------

# - # 로봇으로부터 이미지 수신을 위한 리스닝 주소 (모든 IP에서 수신)
# - SYSTEM_HOST = "0.0.0.0"
# - IMAGE_RECV_PORT = 9001 # 예시 포트

# - # [중요] 이미지를 전달할 AI 서버의 주소
# - # Main Server와 AI Server는 동일한 PC에서 실행되므로, localhost(127.0.0.1) 주소를 사용.
# - AI_SERVER_HOST = "127.0.0.1"
# - AI_SERVER_PORT = 9002 # AI 서버가 수신 대기하는 포트

# - # AI 서버로부터 분석 결과 수신을 위한 리스닝 주소
# - ANALYSIS_RECV_PORT = 9003 # 예시 포트

# - # Merger가 최종 결과를 전송할 GUI의 주소
# - # GUI는 다른 PC에서 실행될 가능성이 있으므로 실제 IP 주소를 기입.
# - GUI_HOST = "gui_pc_ip_address" # GUI가 실행되는 PC의 IP
# - GUI_PORT = 9004 # GUI가 수신 대기하는 포트


# -------------------------------------------------------------------------------------
# [섹션 3] SystemManager 클래스 정의
# -------------------------------------------------------------------------------------

# class SystemManager:
#   """
#   데이터 흐름을 제어하기 위해 각 컴포넌트를 생성하고 연결하는 메인 클래스.
#   """

#   # def __init__(self):
#     # """
#     # 1. 컴포넌트 간 데이터 파이프라인 역할을 할 공유 큐(Queue)들을 생성.
#     # 2. 각 컴포넌트(ImageManager, DetectAnalyzer, Merger)의 인스턴스를 생성.
#     # 3. 인스턴스 생성 시, 데이터 통신에 필요한 큐와 네트워크 주소를 전달.
#     # """
#
#     # - 데이터 공유 큐 생성
#     #   - # ImageManager가 원본 이미지를 Merger로 보내기 위한 큐
#     #   - self.image_for_merger_queue = queue.Queue()
#     #   - # DetectAnalyzer가 분석 결과를 Merger로 보내기 위한 큐
#     #   - self.detection_result_queue = queue.Queue()
#
#     # - 컴포넌트 인스턴스 생성 및 연결
#     #   - self.image_manager = ImageManager(
#     #         listen_port=IMAGE_RECV_PORT,
#     #         ai_server_addr=(AI_SERVER_HOST, AI_SERVER_PORT),
#     #         output_queue=self.image_for_merger_queue
#     #     )
#     #   - self.detect_analyzer = DetectAnalyzer(
#     #         listen_port=ANALYSIS_RECV_PORT,
#     #         output_queue=self.detection_result_queue
#     #     )
#     #   - self.merger = Merger(
#     #         image_queue=self.image_for_merger_queue,
#     #         detection_queue=self.detection_result_queue,
#     #         gui_addr=(GUI_HOST, GUI_PORT)
#     #     )
#
#     # - 생성된 스레드들을 리스트로 관리
#     #   - self.threads = [self.image_manager, self.detect_analyzer, self.merger]

#   # def start(self):
#     # # 모든 컴포넌트 스레드 시작

#   # def stop(self):
#     # # 모든 컴포넌트 스레드 종료


# -------------------------------------------------------------------------------------
# [섹션 4] 실행 진입점
# -------------------------------------------------------------------------------------

# if __name__ == "__main__":
#   # 1. SystemManager 객체 생성
#   # 2. 시스템 시작 (system.start())
#   # 3. Ctrl+C 등으로 안전하게 종료하는 로직